import cv2
import numpy as np
import time, os
from gtts import gTTS
from playsound import playsound

# Load YOLO
net = cv2.dnn.readNet("yolov3.weights", "yolov3.cfg")

# Load coco.names file
with open("coco.names", 'r') as f:
    classes = [line.strip() for line in f]

layer_names = net.getLayerNames()
output_layers = [layer_names[i[0] - 1] for i in net.getUnconnectedOutLayers()]

cap = cv2.VideoCapture(0)  # You can give 1 or 2 for extra connected webcams
frame_no = 0
inc = 0

# Looping to create N_images to look like video
while True:
    start_time = time.time()  # Start time counting to measure frames processing speed
    ret, frame = cap.read()  # Reading from webcam
    if not ret:
        break

    frame_no += 1
    class_ids = []
    confidences = []
    detect_obj = 0

    height, width = frame.shape[:2]  # Get dimensions of current frame

    blob = cv2.dnn.blobFromImage(frame, 0.00392, (416, 416), (0, 0, 0), True, crop=False)  # Detects blob within the frame
    net.setInput(blob)
    outputs = net.forward(output_layers)

    for out in outputs:
        for detection in out:
            scores = detection[5:]
            class_id = np.argmax(scores)
            confidence = scores[class_id]
            if confidence > 0.6:
                class_ids.append(class_id)
                confidences.append(float(confidence))

    voice = ""
    for i in range(len(class_ids)):
        conf = confidences[i]
        label = classes[class_ids[i]]  # 'label' variable holds name of object detected
        print(label, conf * 100)  # Prints object detected with how confident it is in its prediction
        voice += str(label) + " in front of you. "  # String being passed to convert to voice with gtts

    file_path = 'voice{}.mp3'.format(inc)  # Specify path to temporarily store text to voice conversion
    inc += 1
    sound = gTTS(text=voice, lang='en')  # Text to voice conversion with gtts
    sound.save(file_path)  # Save voice file in specified path
    if class_ids:  # If any object is detected, it says the name else says 'no object detected'
        playsound(file_path)
    else:
        playsound('no_obj.mp3')  # Create an mp3 file saying 'no object detected'
    os.remove(file_path)  # Remove the voice file saved
    end_time = time.time()  # Stop time counter after all processing is done
    elapsed = end_time - start_time
    print(1 / elapsed)  # Gives the number of frames processed per second

cap.release()
cv2.destroyAllWindows()
